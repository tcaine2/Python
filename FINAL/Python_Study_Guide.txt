Chapter 1: Python Basics

- Program Design
  - Plan the structure and flow of your program before coding.
  - Use functions, variables, loops, and conditionals effectively.

- IDEs
  - An Integrated Development Environment (IDE) helps write, test, and debug code. Examples: VS Code, PyCharm, IDLE.

- Comments
  - Single-line comment: # This is a comment
  - Multi-line comment: 
    """
    This is a
    multi-line comment
    """

- Keywords
  - Reserved words in Python, such as if, else, def, True, False, etc.

- Print Statements
  - Print output to the console: 
    print("Hello, World!")

- Escape Characters
  - Use \ to escape characters. Examples:
    - \n (new line)
    - \t (tab)
    - \\ (backslash)

Chapter 2.1: Functions

- Math Operators
  - +, -, *, /, // (floor division), % (modulus), ** (exponentiation)

- Concatenating Strings
  - Combine strings: 
    greeting = "Hello" + " " + "World!"

- The % Operator
  - Modulus: returns the remainder of a division. 
    Example: 5 % 2 returns 1.

- Incrementing and Decrementing Values
  - Increment: x += 1
  - Decrement: x -= 1

- Finding Roots in Exponents
  - Square root: x ** 0.5

- Floor Division
  - // operator: returns the integer part of division. Example: 7 // 2 returns 3.

- Output with Strings and Variables
  - Concatenate variables and strings: 
    name = "John" 
    print("Hello, " + name)

- Print() Using Multiple Arguments
  - Pass multiple arguments to print(): 
    print("The result is", result)

- Formatting Text
  - Use f-strings for formatted output: 
    name = "Alice" 
    print(f"Hello, {name}")

Chapter 2.2: Variables and Input

- Variables
  - Used to store data: 
    x = 5, name = "Alice"

- Data Types
  - int, float, str, bool, list, tuple, etc.

- Naming Variables
  - Valid names: start with a letter or underscore, followed by letters, numbers, or underscores. 
    Example: age, _score

- User Input
  - Get input from the user: 
    name = input("Enter your name: ")

- Functions
  - Use functions to encapsulate reusable code. 
    Example:
    def greet(name):
        print(f"Hello, {name}")

Chapter 3: Random

- Random Numbers
  - Use import random and random.randint(a, b) for random integers between a and b.

- Random Seeded Numbers
  - Set the seed for reproducible random results: 
    random.seed(42)

- Bounded Numbers
  - Use random.randint(a, b) or random.uniform(a, b) for bounded random numbers.

Chapter 4: Conditionals

- If Statements
  - Check conditions: 
    if x > 5:
        print("Greater than 5")

- If Else Statements
  - Provide alternative actions: 
    if x > 5:
        print("Greater than 5")
    else:
        print("Less than or equal to 5")

- If Elif Else Statements
  - Chain multiple conditions: 
    if x > 5:
        print("Greater than 5")
    elif x == 5:
        print("Equal to 5")
    else:
        print("Less than 5")

Chapter 5: Loops

- For Loop to Iterate Through a List
  - Loop over elements in a list: 
    for item in [1, 2, 3]:
        print(item)

- For Loop to Iterate Through a Range
  - Loop over a range of numbers: 
    for i in range(5):
        print(i)

- While Loops
  - Loop while a condition is true: 
    while x < 5:
        print(x)
        x += 1

Chapter 6: Lists

- What a List Looks Like
  - Lists are ordered collections: 
    fruits = ["apple", "banana", "cherry"]

- Adding and Removing Items in a List
  - Add: fruits.append("orange")
  - Remove: fruits.remove("banana")

- Order of Lists
  - Lists maintain insertion order. Access by index: fruits[0]

- Iterating Through Lists
  - Loop through list elements: 
    for fruit in fruits:
        print(fruit)

- Splat Operator
  - Unpack elements of a list: 
    *fruits for unpacking in function arguments.

- Randomizing Items in a List
  - Use random.shuffle(list) to shuffle items.

Chapter 7: Files and Folders

- Open a File
  - Open a file for reading or writing: 
    file = open("file.txt", "r")

- Write to a File
  - Write text to a file: 
    file.write("Hello, World!")

- Read from a File
  - Read file content: 
    content = file.read()

- Importing os
  - Use import os to interact with the operating system. 
    Example: os.remove("file.txt")

Chapter 8: More Functions

- Importing Utility and Support Files
  - Import code from other files using import filename

- Import as
  - Alias an import for convenience: 
    import random as r

- Docstrings
  - Add documentation to functions: 
    def greet(name):
        """
        Greets the user with their name.
        """
        print(f"Hello, {name}")
